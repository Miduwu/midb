import { copyFileSync, cpSync, existsSync, mkdirSync, readdirSync, rmSync } from 'fs'
import { execSync } from 'child_process'
import { join } from 'path'

/**
 * The URL of the repository in GitHub.
 */
const REPO_URL = 'https://github.com/Miduwu/midb'

/**
 * The name of the repository.
 * @type {string}
 */
const REPO_NAME = REPO_URL.split('/').pop()

/**
 * The current working directory.
 */
const ROOT = process.cwd()

/**
 * Directory where the cloned repository is located at.
 */
const REPO_FOLDER = join(ROOT, REPO_NAME)

/**
 * The directory of the final documentation files.
 */
const FINAL_DOCS_FOLDER = join(ROOT, 'src/content/docs/autogenerated')

/**
 * Converts a text to formal case.
 * @param {string} text - The text to convert.
 * @returns {string}
 */
function toFormalCase(text) {
    return text.split(' ')
    .map(
        part => part[0].toUpperCase() + part.slice(1)
    )
    .join(' ')
}

/**
 * The main function to update the autogenerated documentation.
 * @returns {Promise<boolean>}
 */
async function main() {
    let succeed = false

    // Delete the cloned repo folder if exists.
    if (existsSync(REPO_FOLDER)) {
        rmSync(REPO_FOLDER, { recursive: true })
    }

    // Trying to clone the repo.
    try {
        execSync(`git clone ${REPO_URL}`, {
            stdio: 'inherit'
        })
    } catch {
        return succeed
    }

    // Moving the "micro-docgen" config file.
    copyFileSync(`${ROOT}/micro-docgen.json`, `${REPO_FOLDER}/micro-docgen.json`)

    // Installing and generating the automated docs.
    try {
        execSync(`cd ./${REPO_NAME} && pnpm install && npx micro-docgen`, {
            stdio: 'inherit'
        })
    } catch {
        return succeed
    }

    // Checking if the "docs" folder exists.
    if (existsSync(`${REPO_FOLDER}/docs`)) {
        // Removing the "docs.json" file.
        rmSync(`${REPO_FOLDER}/docs/docs.json`)

        const folders = readdirSync(`${REPO_FOLDER}/docs`)
        for (const folder of folders) {
            // Cleaning purposes.
            if (existsSync(`${FINAL_DOCS_FOLDER}/${toFormalCase(folder)}`)) {
                rmSync(`${FINAL_DOCS_FOLDER}/${toFormalCase(folder)}`, { recursive: true })
            }

            // Create the folder.
            mkdirSync(`${FINAL_DOCS_FOLDER}/${toFormalCase(folder)}`)

            cpSync(`${REPO_FOLDER}/docs/${folder}`, `${FINAL_DOCS_FOLDER}/${toFormalCase(folder)}`, {
                recursive: true
            })
        }

        succeed = true
    }

    return succeed
}

main()